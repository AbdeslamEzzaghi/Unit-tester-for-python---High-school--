import { GoogleGenAI, Type } from "@google/genai";

export interface TestCase {
  id: string;
  input: string;
  expectedOutput: string;
}

export interface TestResult {
  input: string;
  expected: string;
  actual: string;
  passed: boolean;
}

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  console.error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY as string });
const model = 'gemini-2.5-flash';

export const runPythonCode = async (code: string): Promise<string> => {
  if (!API_KEY) {
    return "Error: API_KEY is not configured. Please set the API_KEY environment variable.";
  }
  
  const prompt = `
You are a Python interpreter. Execute the following Python code and return ONLY the standard output.
- Do not provide any explanation, commentary, or markdown formatting like \`\`\`python.
- If the code executes successfully, print the standard output.
- If the code produces no output, return an empty string.
- If the code results in an error, return the complete, standard Python traceback.
- If the code requires user input (e.g., from \`input()\`), return a user-friendly error message stating that interactive input is not supported.

Code to execute:
\`\`\`python
${code}
\`\`\`
`;

  try {
    const response = await ai.models.generateContent({
        model: model,
        contents: prompt,
    });
    return response.text.trim();
  } catch (error) {
    console.error("Error executing Python code via Gemini:", error);
    if (error instanceof Error) {
        return `An error occurred while communicating with the AI service: ${error.message}`;
    }
    return "An unknown error occurred while communicating with the AI service.";
  }
};

export const runPythonCodeWithTests = async (code: string, tests: Pick<TestCase, 'input' | 'expectedOutput'>[]): Promise<TestResult[]> => {
    if (!API_KEY) {
        throw new Error("API_KEY is not configured.");
    }

    const testCasesJson = JSON.stringify(tests);
    const prompt = `
You are a Python test execution engine.
I will provide you with a Python script and a series of test cases in a JSON array.

Your task is to execute the script for each test case and determine if the output matches the expected output.
For each test case:
1. Provide the test case's "input" string to the script's first \`input()\` call. If the script calls \`input()\` multiple times, subsequent calls should receive an empty string.
2. Capture all standard output (\`stdout\`) generated by the script.
3. Compare the captured \`stdout\` (stripping all leading/trailing whitespace) with the test case's "expectedOutput".
4. If the code throws an error during execution, capture the Python traceback as a string in the "actual" field and set "passed" to false.

Your response MUST be a valid JSON array of objects, and nothing else. Do not wrap it in markdown or provide any explanations.

Python Script:
\`\`\`python
${code}
\`\`\`

Test Cases:
${testCasesJson}
`;

    const responseSchema = {
      type: Type.ARRAY,
      items: {
        type: Type.OBJECT,
        properties: {
          input: { type: Type.STRING },
          expected: { type: Type.STRING },
          actual: { type: Type.STRING },
          passed: { type: Type.BOOLEAN },
        },
        required: ["input", "expected", "actual", "passed"],
      },
    };

    try {
        const response = await ai.models.generateContent({
            model: model,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: responseSchema,
            },
        });
        
        const resultText = response.text.trim();
        const results = JSON.parse(resultText);
        // The Gemini response uses 'expected', but our TestResult uses 'expected'. Let's map it.
        return results.map((r: any) => ({
            input: r.input,
            expected: r.expected,
            actual: r.actual,
            passed: r.passed,
        }));

    } catch (error) {
        console.error("Error executing Python code with tests via Gemini:", error);
        if (error instanceof Error) {
            throw new Error(`An error occurred while communicating with the AI service: ${error.message}`);
        }
        throw new Error("An unknown error occurred while communicating with the AI service.");
    }
};